
/* 
 * The Gradle task dependencies 
 */
buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath 'io.opencaesar.adapters:oml2owl-gradle:+'
		classpath 'io.opencaesar.owl:owl-load-gradle:+'
		classpath 'io.opencaesar.owl:owl-reason-gradle:+'
		classpath 'io.opencaesar.owl:owl-fuseki:+'
		classpath 'io.opencaesar.owl:owl-fuseki-gradle:+'
		classpath 'io.opencaesar.owl:owl-query-gradle:+'
		classpath 'io.opencaesar.oml:oml-bikeshed-gradle:+'
	}
}

plugins {
  id 'com.palantir.git-version' version '0.12.3'
}

/* 
 * The Maven coordinates for the project artifact
 */
ext.title = "Core Vocabularies"
description='The set of core vocabularies'
group = 'io.opencaesar.ontologies'
version = gitVersion()

def fusekiDataset = 'core-vocabularies'

apply from: "${rootDir}/gradle/maven-deployment.gradle"

/*
 * A task to generate Bikeshed specification for the OML catalog
 */
task omlToBikeshed(type: io.opencaesar.oml.bikeshed.Oml2BikeshedTask) {
    // OML catalog
    inputCatalogPath = file('catalog.xml')
    // OWL folder
    outputFolderPath = file('build/bikeshed')
    // Publish URL
    publishUrl = 'https://opencaesar.github.io/core-vocabularies/'
}

/*
 * A task to generate the Bikeshed documentations in HTML
 */
import org.gradle.internal.os.OperatingSystem
task generateDocs(dependsOn: omlToBikeshed) {
    doLast {
        if (OperatingSystem.current().isWindows()) {
            exec { commandLine 'build/bikeshed/publish.bat' }
        } else {
            exec { commandLine 'chmod', '+x', 'build/bikeshed/publish.sh' }
            exec { commandLine 'build/bikeshed/publish.sh' }
        }
    }
}

/*
 * A task to convert the OML catalog to OWL catalog
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask) {
  // OML catalog
  inputCatalogPath = file('catalog.xml')
  // OWL catalog
  outputCatalogPath = file('build/rdf/catalog.xml')
  outputFileExtension = 'rdf'
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReasonMetrology(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/rdf/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://iupac.org/metrology-bundle'
  inputFileExtensions = ['rdf']
	outputFileExtension = 'rdf'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://iupac.org/metrology-bundle/classes = ALL_SUBCLASS',
		'http://iupac.org/metrology-bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://iupac.org/metrology-bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/metrology-bundle/reasoning.xml')
}

task owlReasonISO80000(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/rdf/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://iso.org/80000-bundle'
  inputFileExtensions = ['rdf']
	outputFileExtension = 'rdf'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://iso.org/80000-bundle/classes = ALL_SUBCLASS',
		'http://iso.org/80000-bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://iso.org/80000-bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/80000-bundle/reasoning.xml')
}

task owlReasonNistSP811(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/rdf/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://nist.gov/pml/special-publication-811-bundle'
  inputFileExtensions = ['rdf']
	outputFileExtension = 'rdf'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://nist.gov/pml/special-publication-811-bundle/classes = ALL_SUBCLASS',
		'http://nist.gov/pml/special-publication-811-bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://nist.gov/pml/special-publication-811-bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/special-publication-811-bundle/reasoning.xml')
}

/*
 * A task to load an OWL catalog to a Fuseki dataset endpoint
 */
task owlLoad(type:io.opencaesar.owl.load.OwlLoadTask, dependsOn: [owlReasonMetrology, owlReasonISO80000, owlReasonNistSP811]) {
	catalogPath = file('build/rdf/catalog.xml')
	endpointURL = "http://localhost:3030/$fusekiDataset"
  fileExtensions = ['rdf']
	iris = [
		'http://iupac.org/metrology-bundle/classes',
		'http://iupac.org/metrology-bundle/properties',
		'http://iupac.org/metrology-bundle/individuals',
		'http://iso.org/80000-bundle/classes',
		'http://iso.org/80000-bundle/properties',
		'http://iso.org/80000-bundle/individuals',
		'http://nist.gov/pml/special-publication-811-bundle/classes',
	  'http://nist.gov/pml/special-publication-811-bundle/properties',
	  'http://nist.gov/pml/special-publication-811-bundle/individuals'
	]
}

/*
 * Start and stop the Fuseki server
 */
task startFuseki(type: io.opencaesar.owl.fuseki.StartFusekiTask, group: 'fuseki') {
	configurationPath = file('.fuseki.ttl')
	outputFolderPath = file('.fuseki')
}

task stopFuseki(type: io.opencaesar.owl.fuseki.StopFusekiTask, group: 'fuseki') {
	outputFolderPath = file('.fuseki')
}

/*
 * Census query tasks to run a SPARQL query on a Fuseki dataset endpoint
 */
task qGraphs(type:io.opencaesar.owl.query.OwlQueryTask, dependsOn: owlLoad, group: 'query') {
	endpointURL = "http://localhost:3030/$fusekiDataset"
	queryPath = file('src/sparql/graphs.sparql')
	resultPath = file('build/frames')
	format = 'csv'
	outputs.files('build/frames/graphs.csv')
}

task qOntologies(type:io.opencaesar.owl.query.OwlQueryTask, dependsOn: owlLoad, group: 'query') {
	endpointURL = "http://localhost:3030/$fusekiDataset"
	queryPath = file('src/sparql/ontologies.sparql')
	resultPath = file('build/frames')
	format = 'csv'
	outputs.files('build/frames/ontologies.csv')
}

task qClasses(type:io.opencaesar.owl.query.OwlQueryTask, dependsOn: owlLoad, group: 'query') {
	endpointURL = "http://localhost:3030/$fusekiDataset"
	queryPath = file('src/sparql/classes.sparql')
	resultPath = file('build/frames')
	format = 'csv'
	outputs.files('build/frames/classes.csv')
}

task qObjectProperties(type:io.opencaesar.owl.query.OwlQueryTask, dependsOn: owlLoad, group: 'query') {
	endpointURL = "http://localhost:3030/$fusekiDataset"
	queryPath = file('src/sparql/object-properties.sparql')
	resultPath = file('build/frames')
	format = 'csv'
	outputs.files('build/frames/object-properties.csv')
}

task qDataProperties(type:io.opencaesar.owl.query.OwlQueryTask, dependsOn: owlLoad, group: 'query') {
	endpointURL = "http://localhost:3030/$fusekiDataset"
	queryPath = file('src/sparql/data-properties.sparql')
	resultPath = file('build/frames')
	format = 'csv'
	outputs.files('build/frames/data-properties.csv')
}

/*
 * A task to build the project, which executes several tasks together
 */
tasks.named('build') {
    dependsOn owlReasonMetrology
    dependsOn owlReasonISO80000
		dependsOn owlReasonNistSP811
}

/*
 * Publish artifacts
 */
task omlZip(type:Zip, dependsOn: build, group: 'publishing') {
    from file('src/oml')
    include "**/*.oml"
    destinationDirectory = file('build/libs')
    archiveBaseName = project.name
    archiveVersion = project.version
}

task owlZip(type: Zip, dependsOn: build, group: 'publishing') {
  from file('build/rdf')
	include "**/*.rdf"
	destinationDirectory = file('build/libs')
	archiveBaseName = project.name
	archiveVersion = project.version
  archiveExtension = 'rdf.zip'
}

task sparqlZip(type: Zip, dependsOn: build, group: 'publishing') {
  from file('src/sparql')
	include "**/*.sparql"
	destinationDirectory = file('build/libs')
	archiveBaseName = project.name
	archiveVersion = project.version
  archiveExtension = 'sparql.zip'
}

publishing.publications.maven.artifact omlZip
publishing.publications.maven.artifact owlZip
publishing.publications.maven.artifact sparqlZip